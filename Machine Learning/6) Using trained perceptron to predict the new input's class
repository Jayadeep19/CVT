'''
In this code, the perceptron is trained and used to predict the class of a new unknow data from the user.
A class is defined and later made used by the user
'''
import numpy as np

class NeuralNetwork():
    
    def __init__(self):
        np.random.seed(1)
        
        self.synaptic_weights = 2* np.random.random((3,1)) - 1
    
    def sigmoid(self,x):
        return 1/(1 + np.exp(-x))
    
    def sigmoid_der(self, x):
        return x * (1 - x)
    
    def train (self, training_inputs, training_outputs, training_iterations):
        
        for iterations in range(training_iterations):
            
            output = self.think(training_inputs)
            error = training_outputs - output
            
            adjustments = error * self.sigmoid_der(output)
            self.synaptic_weights += np.dot(training_inputs.T, adjustments)
            
    def think(self, inputs):
        
        inputs = inputs.astype(float)
        output = self.sigmoid(np.dot(inputs, self.synaptic_weights))
        return output        
        
 if __name__ == '__main__':
    neural_network = NeuralNetwork()
    
    print('Random synaptic weights :\n {}'.format(neural_network.synaptic_weights))
    
    training_inputs = np.array([[0,0,1],
                               [1,1,1],
                               [1,0,1],
                               [0,1,1]])
    training_outputs = np.array([[0,1,1,0]]).T
    
    neural_network.train(training_inputs, training_outputs, 10000)
    
    print('synaptic weights after training: \n {}'.format(neural_network.synaptic_weights))
    
    A = str(input('Input 1 :'))
    B = str(input('Input 2 :'))
    C = str(input('Input 3 :'))
    
    print('Input data = ', A,B,C)
    print('Output data :')
    print(neural_network.think(np.array([A,B,C])))
    

