# Implementing a Support-vector-machine using Scikit learn

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

#Importing the data set and reading it into pandas dataframe

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"

names = ['sepal-length','sepal-width','petal-length','petal-width','class']

dataset = pd.read_csv(url, names = names)


#Assign the classes and data into different variables

x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,4].values


#split the data into test and train sets

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.20)


# Normalise the data using preprocessing tool box

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(x_train)

x_train =scaler.transform(x_train)
x_test = scaler.transform(x_test)


#train the SVM classifier

from sklearn.svm import LinearSVC
svm = LinearSVC()

svm.fit(x_train,y_train)


# Now as our Linear SVM is trained, we can test the SVM using the test data

y_pred = svm.predict(x_test)



#Plot the confusion matrix

from sklearn.metrics import confusion_matrix

confusion = confusion_matrix(y_test, y_pred, labels = ['Iris-setosa','Iris-versicolor','Iris-virginica'])
sns.heatmap(confusion, annot = True)
plt.xlabel('Predicted Label')
plt.ylabel('True label')
plt.title('Confusion Matrix')
plt.show()



# To find the accuracy of our classifier
from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)


# Now put some random new data into the classifier and analyse the predictions

new = [5.1,3.6,1.4,0.2]

prediction = svm.predict([new])
print(prediction)




